name: Create Branch on Label

on:
  pull_request:
    types:
      - labeled  # Triggers when any label is added to a PR

jobs:
  create_branch:
    if: github.event.label.name == 'merge-done'  # Checks for "merge-done" label specifically
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all branches and history
          token: ${{ secrets.TOKEN }}  # Use GitHub token for permissions

      - name: Fetch all remote branches
        run: |
          git remote set-url origin "https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ github.repository }}.git"
          git fetch --all  # Fetch all branches from the remote

      - name: Verify and Checkout Dev
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/dev; then
            git checkout dev
          else
            echo "Branch 'dev' does not exist in the remote repository."
            exit 1
          fi

      - name: Configure Git
        run: |
          git config user.name "Android-bot"
          git config user.email "android_bot@a7.com"

      - name: Create new branch from dev
        run: |
          BRANCH_NAME="feature/${{ github.event.pull_request.number }}"  # Custom branch name
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV  # Save to GITHUB_ENV for later steps
          
          # Check if the branch already exists
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
            echo "Branch '$BRANCH_NAME' already exists."
          else
            echo "Creating new branch '$BRANCH_NAME' from 'dev'."
            git checkout -b "$BRANCH_NAME" dev || { echo "Failed to create branch"; exit 1; }
            git pull origin dev || { echo "Failed to pull from dev"; exit 1; }
            git push origin "$BRANCH_NAME" || { echo "Failed to push new branch"; exit 1; }
            echo "Branch '$BRANCH_NAME' created and pushed successfully."
          fi

      - name: Load version from version.properties
        id: load_version
        run: |
          VERSION_NAME=$(grep -oP '(?<=VERSION_NAME=).*' version.properties)
          VERSION_CODE=$(grep -oP '(?<=VERSION_CODE=).*' version.properties)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

      - name: Bump version and commit changes
        run: |
          # Increment version code and version name
          NEW_VERSION_CODE=$((VERSION_CODE + 1))
          NEW_VERSION_NAME=$(echo $VERSION_NAME | awk -F. -v OFS=. '{$NF++; print}')
          
          # Update version properties file
          echo "VERSION_NAME=$NEW_VERSION_NAME" > version.properties
          echo "VERSION_CODE=$NEW_VERSION_CODE" >> version.properties
          
          # Commit and push changes
          git add version.properties
          git commit -m "Bump version to $NEW_VERSION_NAME on branch $BRANCH_NAME" || echo "No changes to commit"
          git push origin "$BRANCH_NAME"
